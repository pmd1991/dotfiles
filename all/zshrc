# The following lines were added by compinstall

zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' menu select=0
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle :compinstall filename '/home/scudco/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall
# Lines configured by zsh-newuser-install
HISTFILE=~/.zsh_history
HISTSIZE=1000
SAVEHIST=1000
setopt autocd extendedglob
bindkey -e
# End of lines configured by zsh-newuser-install

autoload -U colors && colors
# get the name of the branch we are on
git_prompt_info() {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return
      echo "(${ref#refs/heads/})"
}
setopt prompt_subst
PROMPT='
%{$reset_color%}%{$fg_bold[magenta]%}%~ %{$fg_bold[yellow]%}$(git_prompt_info)%{$reset_color%} %E
%{$fg_bold[yellow]%}↳  '
RPROMPT="%{$fg_bold[yellow]%}◴ %t%{$reset_color%}"
export VISUAL=/usr/bin/vim

function title {
  if [[ $TERM == "screen" ]]; then
    # Use these two for GNU Screen:
    print -nR $'\033k'$1$'\033'\\
    print -nR $'\033]0;'$2$'\a'
  elif [[ $TERM == "xterm" || $TERM == "rxvt" ]]; then
    # Use this one instead for XTerms:
    print -nR $'\033]0;'$*$'\a'
  fi
}
  
function precmd {
  title zsh "$PWD"
}
    
function preexec {
  emulate -L zsh
  local -a cmd; cmd=(${(z)1})
  title $cmd[1]:t "$cmd[2,-1]"
}

export PATH=~/bin:~/.seeds/bin:/opt/local/bin:/opt/local/sbin:/opt/local/libexec/git-core:/usr/local/mysql/bin:/usr/local/mongodb/bin:$PATH

# ALIASES
alias ls='ls --color=auto'

# some more ls aliases
alias ll='ls -l'
alias la='ls -A'
alias lla='ls -lA'
alias l='lla -CF'

alias g='git'
alias tu='tar zxvf'
alias less='less -r'
alias screen='screen -T xterm-256color'
alias ss='screen -S'
alias screens='ss screens -c ~/.screens'
alias visor='ss visor -c ~/.visor_screens'
alias inbox='cd ~/inbox'
alias node-repl="rlwrap node-repl"
define() { wn $* -over; }

#ruby
alias speco='spec -O spec/spec.opts'
alias gemi='sudo gem install --no-ri --no-rdoc'
alias r='rails'

#insider_pages aliases
alias ip='cd ~/projects/insider_pages/insiderpages'
alias ip_app='ssh -t adam@access.insiderpages.com'
alias ip_app1='ip_app ssh -t app1 sudo su - ip'
alias ip_app2='ip_app ssh -t app2 sudo su - ip'
alias ip_s='echo > log/development.log; script/server'
alias ip_log='ip; tail -f log/development.log'
alias ip_clog='ip; echo > log/development.log; tail -f log/development.log'
alias ip_idd='mysql -uroot -e '\''drop database insiderpages_development; create database insiderpages_development'\''; rake db:migrate RAILS_ENV=development --trace; rake spec:db:fixtures:load'
alias ip_itd='mysql -uroot -e '\''drop database insiderpages_test; create database insiderpages_test'\''; rake db:migrate RAILS_ENV=test --trace'
alias ip_itd2='mysql -uroot -e '\''drop database insiderpages_test2; create database insiderpages_test2'\''; rake db:migrate RAILS_ENV=test TEST_ENV_NUMBER=2 --trace;'

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

source ~/.git-flow-completion.zsh

# Thank you http://twistedmind.com/bundle-exec-bash-shortcut
bundle_commands=( spec rspec cucumber cap watchr rails rackup autotest heroku )

function run_bundler_cmd () {
    if [ -e ./Gemfile ]; then
        echo "bundle exec $@"
        bundle exec $@
    else
        echo "$@"
        $@
    fi
}

for cmd in $bundle_commands
do
    alias $cmd="run_bundler_cmd $cmd"
done
# End thank you
